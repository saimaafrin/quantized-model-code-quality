{
  "name": "Java-45",
  "language": "java",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "class Problem {\n\n  /**\n   * Find the smallest integer that can be formed by rearranging the digits of the given positive integer n, which is greater than n.\n   *\n   * @param n The input positive integer.\n   * @return The smallest rearranged integer greater than n, or -1 if not possible.\n   *\n   * Example:\n   * findSmallestInteger(12)\n   * Output: 21\n   */\n  public static int findSmallestInteger(int n) ",
  "tests": "  public static void main(String[] args) {\n    assert findSmallestInteger(123) == 132;\n    assert findSmallestInteger(531) == -1;\n    assert findSmallestInteger(2071) == 2107;\n\n    System.out.println(\"All tests passed\");\n  }\n}",
  "stop_tokens": [],
  "results": [
    {
      "program": "class Problem {\n\n  /**\n   * Find the smallest integer that can be formed by rearranging the digits of the given positive integer n, which is greater than n.\n   *\n   * @param n The input positive integer.\n   * @return The smallest rearranged integer greater than n, or -1 if not possible.\n   *\n   * Example:\n   * findSmallestInteger(12)\n   * Output: 21\n   */\n  public static int findSmallestInteger(int n)  {\n    int len = (int)(Math.log10(n)) + 1;\n    int[] digits = new int[len];\n    int i = 0;\n    while (n > 0) {\n      digits[i++] = n % 10;\n      n /= 10;\n    }\n\n    for (int k = 0; k < len; k++) {\n      for (int j = k + 1; j < len; j++) {\n        if (digits[j] < digits[k]) {\n          int temp = digits[j];\n          digits[j] = digits[k];\n          digits[k] = temp;\n        }\n      }\n    }\n    int num = 0;\n    for (int j = 0; j < len; j++) {\n      num = num * 10 + digits[j];\n    }\n    if (num > n) {\n      return num;\n    } else {\n      return -1;\n    }\n  }\n  public static void main(String[] args) {\n    assert findSmallestInteger(123) == 132;\n    assert findSmallestInteger(531) == -1;\n    assert findSmallestInteger(2071) == 2107;\n\n    System.out.println(\"All tests passed\");\n  }\n}",
      "timestamp": 1741527472,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_gsg44h.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}