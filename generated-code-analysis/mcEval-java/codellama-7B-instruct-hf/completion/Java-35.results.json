{
  "name": "Java-35",
  "language": "java",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Problem {\n\n  /**\n   * Given an integer array nums where every element appears three times except for one, which appears only once. Find and return the element that appears only once.\n   *\n   * @param nums An integer array where every element appears three times except for one.\n   * @return The element that appears only once.\n   *\n   * Example:\n   * singleNumber(new int[]{2,2,3,2})\n   * Output: 3\n   *\n   * Example:\n   * singleNumber(new int[]{0,1,0,1,0,1,99})\n   * Output: 99\n   */\n  public static int singleNumber(int[] nums) ",
  "tests": "  public static void main(String[] args) {\n    assert singleNumber(new int[] { 6, 1, 6, 6 }) == 1 : \"Test case 1 failed\";\n    assert singleNumber(new int[] { 22, 22, 22, 11, 11, 11, 55 }) ==\n    55 : \"Test case 2 failed\";\n    assert singleNumber(new int[] { -1, 3, -1, 3, -1, 3, 99 }) ==\n    99 : \"Test case 3 failed\";\n    System.out.println(\"All tests passed\");\n  }\n}",
  "stop_tokens": [],
  "results": [
    {
      "program": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Problem {\n\n  /**\n   * Given an integer array nums where every element appears three times except for one, which appears only once. Find and return the element that appears only once.\n   *\n   * @param nums An integer array where every element appears three times except for one.\n   * @return The element that appears only once.\n   *\n   * Example:\n   * singleNumber(new int[]{2,2,3,2})\n   * Output: 3\n   *\n   * Example:\n   * singleNumber(new int[]{0,1,0,1,0,1,99})\n   * Output: 99\n   */\n  public static int singleNumber(int[] nums)  {\n    // Map to store the counts of the integers in nums.\n    // If we are seeing an integer for the first time, set the count to 1.\n    // If we are seeing an integer a second time, set the count to 2.\n    // If we are seeing an integer a third time, set the count to 3.\n    // If the count is 2, then we have seen this integer a second time, and it does not appear only once.\n    // If the count is 3, then we have seen this integer a third time, and it does not appear only once.\n    Map<Integer, Integer> counts = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n      if (!counts.containsKey(nums[i])) {\n        counts.put(nums[i], 1);\n      } else {\n        counts.put(nums[i], counts.get(nums[i]) + 1);\n      }\n    }\n\n    // Find the count for the integer that appears only once.\n    int once = -1;\n    for (int count : counts.values()) {\n      if (count == 2) {\n        once = -1;\n        break;\n      }\n      if (count == 1) {\n        once = counts.keySet().iterator().next();\n        break;\n      }\n    }\n\n    return once;\n  }\n  public static void main(String[] args) {\n    assert singleNumber(new int[] { 6, 1, 6, 6 }) == 1 : \"Test case 1 failed\";\n    assert singleNumber(new int[] { 22, 22, 22, 11, 11, 11, 55 }) ==\n    55 : \"Test case 2 failed\";\n    assert singleNumber(new int[] { -1, 3, -1, 3, -1, 3, 99 }) ==\n    99 : \"Test case 3 failed\";\n    System.out.println(\"All tests passed\");\n  }\n}",
      "timestamp": 1741527486,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError: Test case 2 failed\n\tat Problem.main(tmpyf0ru41n.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}