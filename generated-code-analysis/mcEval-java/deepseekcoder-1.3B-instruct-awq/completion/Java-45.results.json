{
  "name": "Java-45",
  "language": "java",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "class Problem {\n\n  /**\n   * Find the smallest integer that can be formed by rearranging the digits of the given positive integer n, which is greater than n.\n   *\n   * @param n The input positive integer.\n   * @return The smallest rearranged integer greater than n, or -1 if not possible.\n   *\n   * Example:\n   * findSmallestInteger(12)\n   * Output: 21\n   */\n  public static int findSmallestInteger(int n) ",
  "tests": "  public static void main(String[] args) {\n    assert findSmallestInteger(123) == 132;\n    assert findSmallestInteger(531) == -1;\n    assert findSmallestInteger(2071) == 2107;\n\n    System.out.println(\"All tests passed\");\n  }\n}",
  "stop_tokens": [],
  "results": [
    {
      "program": "class Problem {\n\n  /**\n   * Find the smallest integer that can be formed by rearranging the digits of the given positive integer n, which is greater than n.\n   *\n   * @param n The input positive integer.\n   * @return The smallest rearranged integer greater than n, or -1 if not possible.\n   *\n   * Example:\n   * findSmallestInteger(12)\n   * Output: 21\n   */\n  public static int findSmallestInteger(int n)  {\n    if (n < 10) {\n      return n + 1;\n    }\n\n    String numStr = String.valueOf(n);\n    char[] numChars = numStr.toCharArray();\n    int[] numCount = new int[10];\n\n    for (char c : numChars) {\n      numCount[Character.getNumericValue(c)]++;\n    }\n\n    for (int i = 0; i < 10; i += 2) {\n      if (numCount[i] > 0 && numCount[i + 1] > 0) {\n        numCount[i]--;\n        numCount[i + 1]--;\n        numStr = String.valueOf(i) + numStr.replace(\"0\", String.valueOf(i + 1));\n      }\n   \n      if (numStr.charAt(0) != '0') {\n        break;\n      }\n    }\n\n    if (numStr.charAt(0) == '0') {\n      return -1;\n    }\n\n    return Integer.parseInt(numStr);\n  }\n  public static void main(String[] args) {\n    assert findSmallestInteger(123) == 132;\n    assert findSmallestInteger(531) == -1;\n    assert findSmallestInteger(2071) == 2107;\n\n    System.out.println(\"All tests passed\");\n  }\n}",
      "timestamp": 1741620745,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp75vybw2k.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}