{
  "name": "Java-42",
  "language": "java",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "import java.util.HashSet;\nimport java.util.Set;\n\nclass Problem {\n\n  /**\n   * Given a non-negative integer array A, if the sum of each pair of adjacent elements in the array is a perfect square, then the array is considered a square array.\n   * Return the number of square permutations of A. Two permutations A1 and A2 are considered different if there exists an index i such that A1[i] != A2[i].\n   *\n   * @param A The input non-negative integer array.\n   * @return The number of square permutations of A.\n   *\n   * Example:\n   * squarePermutations(new int[]{1, 17, 8})\n   * Output: 2\n   *\n   * Example:\n   * squarePermutations(new int[]{2, 2, 2})\n   * Output: 1\n   */\n  public static int squarePermutations(int[] A) ",
  "tests": "  public static void main(String[] args) {\n    assert squarePermutations(new int[] { 1, 8, 27 }) == 0;\n    assert squarePermutations(new int[] { 1, 8, 17 }) == 2;\n    assert squarePermutations(new int[] { 4, 1, 3, 0, 2 }) == 0;\n    System.out.println(\"All tests passed\");\n  }\n}",
  "stop_tokens": [],
  "results": [
    {
      "program": "import java.util.HashSet;\nimport java.util.Set;\n\nclass Problem {\n\n  /**\n   * Given a non-negative integer array A, if the sum of each pair of adjacent elements in the array is a perfect square, then the array is considered a square array.\n   * Return the number of square permutations of A. Two permutations A1 and A2 are considered different if there exists an index i such that A1[i] != A2[i].\n   *\n   * @param A The input non-negative integer array.\n   * @return The number of square permutations of A.\n   *\n   * Example:\n   * squarePermutations(new int[]{1, 17, 8})\n   * Output: 2\n   *\n   * Example:\n   * squarePermutations(new int[]{2, 2, 2})\n   * Output: 1\n   */\n  public static int squarePermutations(int[] A)  {\n    Set<Integer> set = new HashSet<>();\n    for (int i = 0; i < A.length; i++) {\n      set.add(A[i]);\n    }\n\n    int count = 0;\n    for (int i = 0; i < A.length; i++) {\n      int first = A[i];\n      int second = A[(i + 1) % A.length];\n\n      if (isPerfectSquare(first + second) && set.size() > 1) {\n        count++;\n        set.remove(first);\n      }\n    }\n\n    return count;\n  }\n  public static void main(String[] args) {\n    assert squarePermutations(new int[] { 1, 8, 27 }) == 0;\n    assert squarePermutations(new int[] { 1, 8, 17 }) == 2;\n    assert squarePermutations(new int[] { 4, 1, 3, 0, 2 }) == 0;\n    System.out.println(\"All tests passed\");\n  }\n}",
      "timestamp": 1741610172,
      "stdout": "",
      "stderr": "/tmp/tmp05kqko3v.java:32: error: cannot find symbol\n      if (isPerfectSquare(first + second) && set.size() > 1) {\n          ^\n  symbol:   method isPerfectSquare(int)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}