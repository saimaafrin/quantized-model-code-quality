{
  "name": "Java-2",
  "language": "java",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "class Problem {\n    /**\n     * Given a positive integer Y indicating the start year, and a positive integer N,\n     * this function finds the Nth leap year after the start year Y.\n     *\n     * @param Y The start year.\n     * @param N The position of the leap year to find.\n     * @return The Nth leap year after the start year Y.\n     *\n     * Example:\n     * findNthLeapYear(2000, 4) => 2008\n     * findNthLeapYear(1996, 10) => 2032\n     */\n    public static int findNthLeapYear(int Y, int N) ",
  "tests": "    public static void main(String[] args) {\n        // Test the function with the examples from the comment\n        assert findNthLeapYear(2000, 4) == 2012;\n        assert findNthLeapYear(1996, 10) == 2032;\n        assert findNthLeapYear(2000, 1) == 2000;\n        System.out.println(\"All tests passed\");\n    }\n}",
  "stop_tokens": [],
  "results": [
    {
      "program": "class Problem {\n    /**\n     * Given a positive integer Y indicating the start year, and a positive integer N,\n     * this function finds the Nth leap year after the start year Y.\n     *\n     * @param Y The start year.\n     * @param N The position of the leap year to find.\n     * @return The Nth leap year after the start year Y.\n     *\n     * Example:\n     * findNthLeapYear(2000, 4) => 2008\n     * findNthLeapYear(1996, 10) => 2032\n     */\n    public static int findNthLeapYear(int Y, int N)  {\n        // If start year is not a leap year, we just need to find the Nth\n        // leap year after the first leap year after the start year.\n        if (Y % 4 != 0) {\n            int numLeapYears = 0;\n            int firstLeapYearAfterY = Y + 4 - (Y % 4);\n            while (numLeapYears < N) {\n                firstLeapYearAfterY += 4;\n                numLeapYears++;\n            }\n            return firstLeapYearAfterY;\n        } else {\n            // If start year is a leap year, we can find the Nth leap year\n            // directly by adding multiples of 4 to the start year.\n            return Y + (N - 1) * 4;\n        }\n    }\n    public static void main(String[] args) {\n        // Test the function with the examples from the comment\n        assert findNthLeapYear(2000, 4) == 2012;\n        assert findNthLeapYear(1996, 10) == 2032;\n        assert findNthLeapYear(2000, 1) == 2000;\n        System.out.println(\"All tests passed\");\n    }\n}",
      "timestamp": 1741608269,
      "stdout": "All tests passed\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}