{
  "name": "Java-19",
  "language": "java",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "import java.util.*;\n\nclass Problem {\n    /**\n     * Check if it is possible to split the given integer array into two non-empty arrays\n     * with the same average.\n     *\n     * >>> splitArraySameAverage(new int[]{1,2,3,4,5,6,7,8})\n     * true\n     *\n     * >>> splitArraySameAverage(new int[]{3,1})\n     * false\n     */\n    public boolean splitArraySameAverage(int[] nums) ",
  "tests": "public static void main(String[] args) {\n        Problem solution = new Problem();\n\n        // Test the function with different test cases\n        assert solution.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 8}) == true;\n        assert solution.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 9}) == false;\n        assert solution.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 10}) == true;\n        assert solution.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == true;\n        System.out.println(\"All tests passed\");\n    }\n}",
  "stop_tokens": [],
  "results": [
    {
      "program": "import java.util.*;\n\nclass Problem {\n    /**\n     * Check if it is possible to split the given integer array into two non-empty arrays\n     * with the same average.\n     *\n     * >>> splitArraySameAverage(new int[]{1,2,3,4,5,6,7,8})\n     * true\n     *\n     * >>> splitArraySameAverage(new int[]{3,1})\n     * false\n     */\n    public boolean splitArraySameAverage(int[] nums)  {\n        int len = nums.length;\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        // Make sure the average is an integer\n        boolean isPossible = false;\n        for (int i = 1; i <= len / 2; i++) {\n            if ((sum * i) % len == 0) {\n                isPossible = true;\n                break;\n            }\n        }\n        if (!isPossible) {\n            return false;\n        }\n        // DP\n        boolean[] dp = new boolean[sum + 1];\n        dp[0] = true;\n        int[] count = new int[sum + 1];\n        count[0] = 1;\n        for (int num : nums) {\n            for (int i = sum; i >= num; i--) {\n                dp[i] = dp[i] || dp[i - num] && count[i - num] < len;\n                count[i] = count[i] + (dp[i - num] ? count[i - num] : 0);\n            }\n        }\n        for (int i = 1; i <= len / 2; i++) {\n            if ((sum * i) % len == 0 && dp[(sum * i) / len] && count[(sum * i) / len] > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\npublic static void main(String[] args) {\n        Problem solution = new Problem();\n\n        // Test the function with different test cases\n        assert solution.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 8}) == true;\n        assert solution.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 9}) == false;\n        assert solution.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 10}) == true;\n        assert solution.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == true;\n        System.out.println(\"All tests passed\");\n    }\n}",
      "timestamp": 1741631484,
      "stdout": "All tests passed\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}