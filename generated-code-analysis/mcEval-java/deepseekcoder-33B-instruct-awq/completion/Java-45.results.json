{
  "name": "Java-45",
  "language": "java",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "class Problem {\n\n  /**\n   * Find the smallest integer that can be formed by rearranging the digits of the given positive integer n, which is greater than n.\n   *\n   * @param n The input positive integer.\n   * @return The smallest rearranged integer greater than n, or -1 if not possible.\n   *\n   * Example:\n   * findSmallestInteger(12)\n   * Output: 21\n   */\n  public static int findSmallestInteger(int n) ",
  "tests": "  public static void main(String[] args) {\n    assert findSmallestInteger(123) == 132;\n    assert findSmallestInteger(531) == -1;\n    assert findSmallestInteger(2071) == 2107;\n\n    System.out.println(\"All tests passed\");\n  }\n}",
  "stop_tokens": [],
  "results": [
    {
      "program": "class Problem {\n\n  /**\n   * Find the smallest integer that can be formed by rearranging the digits of the given positive integer n, which is greater than n.\n   *\n   * @param n The input positive integer.\n   * @return The smallest rearranged integer greater than n, or -1 if not possible.\n   *\n   * Example:\n   * findSmallestInteger(12)\n   * Output: 21\n   */\n  public static int findSmallestInteger(int n)  {\n    int[] digits = new int[10];\n    int numDigits = 0;\n\n    // Count the frequency of each digit in the input number\n    while (n > 0) {\n      int digit = n % 10;\n      digits[digit]++;\n      n /= 10;\n      numDigits++;\n    }\n\n    int result = 0;\n    int multiplier = 1;\n\n    // Find the first digit that can be decreased\n    for (int i = 1; i < 10; i++) {\n      if (digits[i] > 0) {\n        digits[i]--;\n        result += i * multiplier;\n        multiplier *= 10;\n        break;\n      }\n    }\n\n    // Fill the remaining digits in increasing order\n    for (int i = 0; i < 10; i++) {\n      while (digits[i] > 0) {\n        result += i * multiplier;\n        multiplier *= 10;\n        digits[i]--;\n      }\n    }\n\n    // Check if the result has the same number of digits as the input number\n    return (int) (result / Math.pow(10, numDigits - 1)) > 0 ? result : -1;\n  }\n  public static void main(String[] args) {\n    assert findSmallestInteger(123) == 132;\n    assert findSmallestInteger(531) == -1;\n    assert findSmallestInteger(2071) == 2107;\n\n    System.out.println(\"All tests passed\");\n  }\n}",
      "timestamp": 1741631472,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqn2md1xj.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}