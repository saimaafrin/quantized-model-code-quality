{
  "name": "Python-8",
  "language": "py",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "from typing import List, Tuple\n\ndef max_value_on_paths(N: int, grid_values: List[Tuple[int, int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum sum of values collected on two paths in an N x N grid.\n\n    This function utilizes dynamic programming to find two paths from the top-left corner to\n    the bottom-right corner of the grid which maximize the sum of the values collected. Each\n    value can be collected at most once, even if both paths pass through it.\n\n    Args:\n    - N (int): The size of the grid (N x N).\n    - grid_values (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n      the x-coordinate, y-coordinate, and value to be placed on the grid at that position.\n      The list is terminated by a tuple with all zeros.\n\n    Returns:\n    - int: The maximum sum of values collected on the two paths.\n\n    Examples:\n    >>> max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)])\n    3\n    >>> max_value_on_paths(8, [\n    ...     (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n    ...     (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n    ...     (0, 0, 0)])\n    67\n    \"\"\"",
  "tests": "def test_max_value_on_paths():\n    # Test case 1: Small grid with clear path\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n    \n    # Test case 2: Example provided in the problem statement\n    assert max_value_on_paths(8, [\n        (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n        (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n        (0, 0, 0)]) == 67\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value_on_paths()",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List, Tuple\n\ndef max_value_on_paths(N: int, grid_values: List[Tuple[int, int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum sum of values collected on two paths in an N x N grid.\n\n    This function utilizes dynamic programming to find two paths from the top-left corner to\n    the bottom-right corner of the grid which maximize the sum of the values collected. Each\n    value can be collected at most once, even if both paths pass through it.\n\n    Args:\n    - N (int): The size of the grid (N x N).\n    - grid_values (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n      the x-coordinate, y-coordinate, and value to be placed on the grid at that position.\n      The list is terminated by a tuple with all zeros.\n\n    Returns:\n    - int: The maximum sum of values collected on the two paths.\n\n    Examples:\n    >>> max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)])\n    3\n    >>> max_value_on_paths(8, [\n    ...     (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n    ...     (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n    ...     (0, 0, 0)])\n    67\n    \"\"\"\n    # Check if the number of grid values exceeds the size of the grid.\n    if len(grid_values) > N:\n        raise ValueError('The number of grid values exceeds the size of the grid.')\n\n    # Create the grid and fill it with zeroes.\n    grid: List[List[int]] = [[0 for i in range(N)] for j in range(N)]\n\n    # Fill the grid with the grid values.\n    for row, col, value in grid_values:\n        if 0 <= row < N and 0 <= col < N:\n            grid[row][col] = value\n\n    # Create the maximum value arrays.\n    max_value_left: List[List[int]] = [[0 for i in range(N)] for j in range(N)]\n    max_value_right: List[List[int]] = [[0 for i in range(N)] for j in range(N)]\n\n    # Fill the maximum value arrays with the grid values.\n    for row in range(N):\n        for col in range(N):\n            if row == 0 and col == 0:\n                max_value_left[row][col] = grid[row][col]\n                max_value_right[row][col] = grid[row][col]\n            elif row == 0 and col > 0:\n                max_value_left[row][col] = grid[row][col] + max_value_left[row][col - 1]\n                max_value_right[row][col] = grid[row][col] + max_value_right[row][col - 1]\n            elif col == 0 and row > 0:\n                max_value_left[row][col] = grid[row][col] + max_value_left[row - 1][col]\n                max_value_right[row][col] = grid[row][col] + max_value_right[row - 1][col]\n            else:\n                max_value_left[row][col] = max(grid[row][col] + max_value_left[row - 1][col],\n                                               grid[row][col] + max_value_left[row][col - 1])\n                max_value_right[row][col] = max(grid[row][col] + max_value_right[row - 1][col],\n                                                grid[row][col] + max_value_right[row][col - 1])\n\n    # Find the maximum sum of values collected on both paths.\n    max_sum: int = 0\n    for row in range(N):\n        for col in range(N):\ndef test_max_value_on_paths():\n    # Test case 1: Small grid with clear path\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n    \n    # Test case 2: Example provided in the problem statement\n    assert max_value_on_paths(8, [\n        (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n        (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n        (0, 0, 0)]) == 67\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value_on_paths()",
      "timestamp": 1741577636,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpmq1k1zur.py\", line 67\n    def test_max_value_on_paths():\nIndentationError: expected an indented block after 'for' statement on line 66\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}