{
  "name": "Python-14",
  "language": "py",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "def verify_isbn(isbn: str) -> str:\n    \"\"\"\n    Verify the correctness of a given ISBN number and correct it if necessary.\n\n    The function checks the provided ISBN number against the ISBN standard checksum calculation.\n    If the checksum is correct, the function returns \"Right\". If the checksum is incorrect,\n    the function returns the corrected ISBN number.\n\n    Args:\n    isbn: A string representing the ISBN number to be verified. The format should be 'x-xxx-xxxxx-x',\n          where 'x' is a digit, and the last 'x' could also be 'X' representing the checksum digit.\n\n    Returns:\n    A string that is either \"Right\" if the ISBN checksum is correct, or the corrected ISBN number\n    in the same format as the input if the checksum is incorrect.\n\n    Examples:\n    >>> verify_isbn(\"0-670-82162-4\")\n    'Right'\n    \n    >>> verify_isbn(\"0-670-82162-0\")\n    '0-670-82162-4'\n    \"\"\"",
  "tests": "def test_verify_isbn():\n    # Test case 1: Correct ISBN number\n    assert verify_isbn(\"0-670-82162-4\") == \"Right\", \"Test case 1 failed\"\n\n    # Test case 2: Incorrect ISBN number with wrong checksum digit\n    assert verify_isbn(\"0-670-82162-0\") == \"0-670-82162-4\", \"Test case 2 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_verify_isbn()",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "def verify_isbn(isbn: str) -> str:\n    \"\"\"\n    Verify the correctness of a given ISBN number and correct it if necessary.\n\n    The function checks the provided ISBN number against the ISBN standard checksum calculation.\n    If the checksum is correct, the function returns \"Right\". If the checksum is incorrect,\n    the function returns the corrected ISBN number.\n\n    Args:\n    isbn: A string representing the ISBN number to be verified. The format should be 'x-xxx-xxxxx-x',\n          where 'x' is a digit, and the last 'x' could also be 'X' representing the checksum digit.\n\n    Returns:\n    A string that is either \"Right\" if the ISBN checksum is correct, or the corrected ISBN number\n    in the same format as the input if the checksum is incorrect.\n\n    Examples:\n    >>> verify_isbn(\"0-670-82162-4\")\n    'Right'\n    \n    >>> verify_isbn(\"0-670-82162-0\")\n    '0-670-82162-4'\n    \"\"\"\n    # Check input format\n    if not isinstance(isbn, str):\n        raise TypeError(\"Wrong type, input should be a string\")\n    isbn_numbers = isbn.split(\"-\")\n    if len(isbn_numbers) != 5:\n        raise ValueError(\"Wrong number of groups, input should be a string with the format 'x-xxx-xxxxx-x'\")\n    for i in range(1, 5):\n        if len(isbn_numbers[i]) != 3:\n            raise ValueError(f\"Wrong number of digits in group {i}, input should be a string with the format 'x-xxx-xxxxx-x'\")\n    \n    # Calculate the checksum\n    calculated_checksum = 0\n    for i in range(4):\n        calculated_checksum += int(isbn_numbers[i][0]) * (i + 1)\n        calculated_checksum += int(isbn_numbers[i][1]) * (i + 2)\n        calculated_checksum += int(isbn_numbers[i][2]) * (i + 3)\n    calculated_checksum %= 11\n    if calculated_checksum == 10:\n        raise ValueError(\"Wrong checksum digit, it should be 'X' or a digit between 0 and 9\")\n    if calculated_checksum == int(isbn_numbers[4][0]):\n        return \"Right\"\n    else:\n        return isbn[:-1] + str(calculated_checksum)\ndef test_verify_isbn():\n    # Test case 1: Correct ISBN number\n    assert verify_isbn(\"0-670-82162-4\") == \"Right\", \"Test case 1 failed\"\n\n    # Test case 2: Incorrect ISBN number with wrong checksum digit\n    assert verify_isbn(\"0-670-82162-0\") == \"0-670-82162-4\", \"Test case 2 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_verify_isbn()",
      "timestamp": 1741611714,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5ypgabf6.py\", line 57, in <module>\n    test_verify_isbn()\n  File \"/tmp/tmp5ypgabf6.py\", line 49, in test_verify_isbn\n    assert verify_isbn(\"0-670-82162-4\") == \"Right\", \"Test case 1 failed\"\n  File \"/tmp/tmp5ypgabf6.py\", line 29, in verify_isbn\n    raise ValueError(\"Wrong number of groups, input should be a string with the format 'x-xxx-xxxxx-x'\")\nValueError: Wrong number of groups, input should be a string with the format 'x-xxx-xxxxx-x'\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}