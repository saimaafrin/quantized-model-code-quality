{
  "name": "Python-8",
  "language": "py",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "from typing import List, Tuple\n\ndef max_value_on_paths(N: int, grid_values: List[Tuple[int, int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum sum of values collected on two paths in an N x N grid.\n\n    This function utilizes dynamic programming to find two paths from the top-left corner to\n    the bottom-right corner of the grid which maximize the sum of the values collected. Each\n    value can be collected at most once, even if both paths pass through it.\n\n    Args:\n    - N (int): The size of the grid (N x N).\n    - grid_values (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n      the x-coordinate, y-coordinate, and value to be placed on the grid at that position.\n      The list is terminated by a tuple with all zeros.\n\n    Returns:\n    - int: The maximum sum of values collected on the two paths.\n\n    Examples:\n    >>> max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)])\n    3\n    >>> max_value_on_paths(8, [\n    ...     (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n    ...     (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n    ...     (0, 0, 0)])\n    67\n    \"\"\"",
  "tests": "def test_max_value_on_paths():\n    # Test case 1: Small grid with clear path\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n    \n    # Test case 2: Example provided in the problem statement\n    assert max_value_on_paths(8, [\n        (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n        (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n        (0, 0, 0)]) == 67\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value_on_paths()",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List, Tuple\n\ndef max_value_on_paths(N: int, grid_values: List[Tuple[int, int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum sum of values collected on two paths in an N x N grid.\n\n    This function utilizes dynamic programming to find two paths from the top-left corner to\n    the bottom-right corner of the grid which maximize the sum of the values collected. Each\n    value can be collected at most once, even if both paths pass through it.\n\n    Args:\n    - N (int): The size of the grid (N x N).\n    - grid_values (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n      the x-coordinate, y-coordinate, and value to be placed on the grid at that position.\n      The list is terminated by a tuple with all zeros.\n\n    Returns:\n    - int: The maximum sum of values collected on the two paths.\n\n    Examples:\n    >>> max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)])\n    3\n    >>> max_value_on_paths(8, [\n    ...     (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n    ...     (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n    ...     (0, 0, 0)])\n    67\n    \"\"\"\n\n    # Initialize a grid of size N x N with zeros\n    grid = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n\n    # Fill in the grid with the given values\n    for x, y, value in grid_values:\n        grid[x][y] = value\n\n    # Initialize a dp array of size 2*N+1 x 2*N+1 with negative infinity\n    dp = [[-float('inf') for _ in range(2*N + 1)] for _ in range(2*N + 1)]\n\n    # The base case is when the current position is the bottom-right corner of the grid\n    dp[N][N] = grid[N][N]\n\n    # Calculate the maximum sum of values collected on the two paths\n    for s in range(2*N - 1, -1, -1):\n        for x1 in range(max(0, s - N), min(N, s) + 1):\n            y1 = s - x1\n            for x2 in range(x1, N + 1):\n                y2 = s - x2\n                best = max(dp[x1+1][y1], dp[x1][y1+1], dp[x1+1][y1+1], dp[x1][y1])\n                if (x1, y1) == (x2, y2):  # The paths do not overlap\n                    dp[x1+1][y1+1] = best + grid[x1+1][y1+1]\n                else:  # The paths overlap\n                    dp[x1+1][y1+1] = dp[x2+1][y2+1] = best + grid[x1+1][y1+1] + grid[x2+1][y2+1]\n\n    # Return the maximum sum of values collected on the two paths\n    return dp[1][1]\ndef test_max_value_on_paths():\n    # Test case 1: Small grid with clear path\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n    \n    # Test case 2: Example provided in the problem statement\n    assert max_value_on_paths(8, [\n        (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n        (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n        (0, 0, 0)]) == 67\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value_on_paths()",
      "timestamp": 1747013873,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpprwcg_q8.py\", line 70, in <module>\n    test_max_value_on_paths()\n  File \"/tmp/tmpprwcg_q8.py\", line 59, in test_max_value_on_paths\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n  File \"/tmp/tmpprwcg_q8.py\", line 51, in max_value_on_paths\n    dp[x1+1][y1+1] = best + grid[x1+1][y1+1]\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}