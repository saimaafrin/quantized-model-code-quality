{
  "name": "Python-20",
  "language": "py",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "from typing import List \ndef polynomial_to_string(n: int, coeffs: List[int]) -> str:\n    \"\"\"\n    Converts a list of polynomial coefficients into a formatted string representation.\n\n    The function takes in the highest degree `n` of the polynomial and a list of coefficients `coeffs`,\n    which are ordered from the highest degree term to the constant term. It returns a string that\n    represents the polynomial with the following rules:\n    - Terms with a coefficient of zero are omitted.\n    - The sign of each term is determined (+ for positive, - for negative), with no leading '+' for the first term.\n    - The absolute value of the coefficient is shown unless it's 1 and the term includes the variable `x`.\n    - The variable part is formatted based on its degree; `x^degree` for degree > 1, `x` for degree 1, and\n      nothing for degree 0 (constant term).\n    - Terms are joined without additional spaces, starting with the highest degree term.\n\n    Args:\n        n (int): The highest degree of the polynomial.\n        coeffs (List[int]): A list of coefficients, starting with the coefficient of the highest degree term.\n\n    Returns:\n        str: The string representation of the polynomial.\n\n    Examples:\n        >>> polynomial_to_string(5, [100, -1, 1, -3, 0, 10])\n        '100x^5-x^4+x^3-3x^2+10'\n\n        >>> polynomial_to_string(3, [-50, 0, 0, 1])\n        '-50x^3+1'\n    \"\"\"",
  "tests": "def test_polynomial_to_string():\n    test_cases = [\n        (4, [3, -2, 0, 1, -5], \"3x^4-2x^3+x-5\"),\n        (2, [0, 4, -1], \"+4x-1\"),\n        (0, [7], \"7\"),\n        (3, [1, -1, 0, 1], \"x^3-x^2+1\"),\n    ]\n\n    for i, (n, coeffs, expected) in enumerate(test_cases):\n        result = polynomial_to_string(n, coeffs)\n\n        assert result == expected, f\"Test case {i + 1} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i + 1} passed: expected {expected}, got {result}\")\n\n\ntest_polynomial_to_string()",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List \ndef polynomial_to_string(n: int, coeffs: List[int]) -> str:\n    \"\"\"\n    Converts a list of polynomial coefficients into a formatted string representation.\n\n    The function takes in the highest degree `n` of the polynomial and a list of coefficients `coeffs`,\n    which are ordered from the highest degree term to the constant term. It returns a string that\n    represents the polynomial with the following rules:\n    - Terms with a coefficient of zero are omitted.\n    - The sign of each term is determined (+ for positive, - for negative), with no leading '+' for the first term.\n    - The absolute value of the coefficient is shown unless it's 1 and the term includes the variable `x`.\n    - The variable part is formatted based on its degree; `x^degree` for degree > 1, `x` for degree 1, and\n      nothing for degree 0 (constant term).\n    - Terms are joined without additional spaces, starting with the highest degree term.\n\n    Args:\n        n (int): The highest degree of the polynomial.\n        coeffs (List[int]): A list of coefficients, starting with the coefficient of the highest degree term.\n\n    Returns:\n        str: The string representation of the polynomial.\n\n    Examples:\n        >>> polynomial_to_string(5, [100, -1, 1, -3, 0, 10])\n        '100x^5-x^4+x^3-3x^2+10'\n\n        >>> polynomial_to_string(3, [-50, 0, 0, 1])\n        '-50x^3+1'\n    \"\"\"\n\n    # This list will contain the formatted strings for each term.\n    terms = []\n\n    # Iterate over the coefficients from highest to lowest degree.\n    for i in range(n, -1, -1):\n        # If the coefficient is zero, skip this term.\n        if coeffs[i] == 0:\n            continue\n\n        # Format the coefficient part of the term.\n        # If the coefficient is 1 and the term includes the variable `x`, omit it.\n        if coeffs[i] == 1 and i > 0:\n            coefficient_part = \"\"\n        elif coeffs[i] == -1 and i > 0:\n            coefficient_part = \"-\"\n        else:\n            coefficient_part = str(abs(coeffs[i]))\n\n        # Format the variable part of the term.\n        # If the degree is 0, omit the variable part.\n        # If the degree is 1, just include the variable `x`.\n        # If the degree is > 1, include the variable `x^degree`.\n        if i == 0:\n            variable_part = \"\"\n        elif i == 1:\n            variable_part = \"x\"\n        else:\n            variable_part = \"x^\" + str(i)\n\n        # Add the formatted term to the list of terms.\n        terms.append(coefficient_part + variable_part)\n\n    # Join the terms with '+' between them, omitting the '+' before the first term.\n    return \"+\".join(terms)\ndef test_polynomial_to_string():\n    test_cases = [\n        (4, [3, -2, 0, 1, -5], \"3x^4-2x^3+x-5\"),\n        (2, [0, 4, -1], \"+4x-1\"),\n        (0, [7], \"7\"),\n        (3, [1, -1, 0, 1], \"x^3-x^2+1\"),\n    ]\n\n    for i, (n, coeffs, expected) in enumerate(test_cases):\n        result = polynomial_to_string(n, coeffs)\n\n        assert result == expected, f\"Test case {i + 1} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i + 1} passed: expected {expected}, got {result}\")\n\n\ntest_polynomial_to_string()",
      "timestamp": 1747065777,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3h9u3dew.py\", line 80, in <module>\n    test_polynomial_to_string()\n  File \"/tmp/tmp3h9u3dew.py\", line 76, in test_polynomial_to_string\n    assert result == expected, f\"Test case {i + 1} failed: expected {expected}, got {result}\"\nAssertionError: Test case 1 failed: expected 3x^4-2x^3+x-5, got 5x^4+x^3+2x+3\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}