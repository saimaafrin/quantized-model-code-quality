{
  "name": "Python-8",
  "language": "py",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "from typing import List, Tuple\n\ndef max_value_on_paths(N: int, grid_values: List[Tuple[int, int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum sum of values collected on two paths in an N x N grid.\n\n    This function utilizes dynamic programming to find two paths from the top-left corner to\n    the bottom-right corner of the grid which maximize the sum of the values collected. Each\n    value can be collected at most once, even if both paths pass through it.\n\n    Args:\n    - N (int): The size of the grid (N x N).\n    - grid_values (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n      the x-coordinate, y-coordinate, and value to be placed on the grid at that position.\n      The list is terminated by a tuple with all zeros.\n\n    Returns:\n    - int: The maximum sum of values collected on the two paths.\n\n    Examples:\n    >>> max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)])\n    3\n    >>> max_value_on_paths(8, [\n    ...     (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n    ...     (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n    ...     (0, 0, 0)])\n    67\n    \"\"\"",
  "tests": "def test_max_value_on_paths():\n    # Test case 1: Small grid with clear path\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n    \n    # Test case 2: Example provided in the problem statement\n    assert max_value_on_paths(8, [\n        (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n        (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n        (0, 0, 0)]) == 67\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value_on_paths()",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List, Tuple\n\ndef max_value_on_paths(N: int, grid_values: List[Tuple[int, int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum sum of values collected on two paths in an N x N grid.\n\n    This function utilizes dynamic programming to find two paths from the top-left corner to\n    the bottom-right corner of the grid which maximize the sum of the values collected. Each\n    value can be collected at most once, even if both paths pass through it.\n\n    Args:\n    - N (int): The size of the grid (N x N).\n    - grid_values (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n      the x-coordinate, y-coordinate, and value to be placed on the grid at that position.\n      The list is terminated by a tuple with all zeros.\n\n    Returns:\n    - int: The maximum sum of values collected on the two paths.\n\n    Examples:\n    >>> max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)])\n    3\n    >>> max_value_on_paths(8, [\n    ...     (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n    ...     (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n    ...     (0, 0, 0)])\n    67\n    \"\"\"\n    # Initialize the dynamic programming table.\n    # Each cell contains a tuple of the maximum value that can be collected on a path from\n    # the top-left corner of the grid to that cell and the x-coordinate of the previous cell\n    # on that path.\n    dp = [[(0, 0) for _ in range(N)] for _ in range(N)]\n\n    # Populate the dynamic programming table with the values given in the grid.\n    for x, y, v in grid_values:\n        dp[y][x] = (v, x)\n\n    # Iterate over each cell in the grid and update the dynamic programming table.\n    for y in range(N):\n        for x in range(N):\n            # Update the dynamic programming table for the cell at coordinates (x, y).\n            if dp[y][x][0] != 0:\n                # The cell at coordinates (x, y) contains a value, so we need to calculate\n                # the maximum sum of values collected on a path that passes through it.\n                up_x, up_y = x, y - 1\n                left_x, left_y = x - 1, y\n                # Check if the cell above the current cell contains a value.\n                if 0 <= up_y < N and dp[up_y][up_x][0] != 0:\n                    # The cell above the current cell contains a value, so we add it to the\n                    # maximum sum of values collected on a path that passes through the\n                    # current cell.\n                    dp[y][x] = max(dp[y][x], (dp[up_y][up_x][0] + dp[y][x][0], up_x))\n                # Check if the cell to the left of the current cell contains a value.\n                if 0 <= left_x < N and dp[left_y][left_x][0] != 0:\n                    # The cell to the left of the current cell contains a value, so we add\n                    # it to the maximum sum of values collected on a path that passes\n                    # through the current cell.\n                    dp[y][x] = max(dp[y][x], (dp[left_y][left_x][0] + dp[y][x][0], left_x))\n\n    # Iterate over each cell in the grid and find the maximum sum of values collected on\n    # a path that passes through it.\n    max_value = 0\n    x, y = 0, 0\n    while dp[y][x][0] != 0:\n        # Calculate the maximum sum of values collected on a\ndef test_max_value_on_paths():\n    # Test case 1: Small grid with clear path\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n    \n    # Test case 2: Example provided in the problem statement\n    assert max_value_on_paths(8, [\n        (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n        (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n        (0, 0, 0)]) == 67\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value_on_paths()",
      "timestamp": 1746808830,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp2ny9iazz.py\", line 67\n    def test_max_value_on_paths():\nIndentationError: expected an indented block after 'while' statement on line 65\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}