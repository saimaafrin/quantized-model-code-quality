{
  "name": "Python-29",
  "language": "py",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "def find_min_n_greater_than_k(k: int) -> int:\n    \"\"\"\n    Calculate the smallest positive integer n such that the sum of the harmonic series\n    up to 1/n is greater than a given positive integer k.\n\n    The harmonic series is defined as S_n = 1 + 1/2 + 1/3 + ... + 1/n.\n\n    Args:\n    - k (int): A positive integer representing the threshold value the harmonic series sum must exceed.\n\n    Returns:\n    - int: The smallest integer n for which the harmonic series sum S_n exceeds the threshold k.\n\n    Examples:\n    >>> find_min_n_greater_than_k(1)\n    2\n    >>> find_min_n_greater_than_k(3)\n    11\n    \"\"\"",
  "tests": "def test_find_min_n_greater_than_k():\n    # Test case 1: k = 1, expected result is 2\n\n    assert find_min_n_greater_than_k(1) == 2, \"Test case 1 failed.\"\n\n    # Test case 2: k = 3, expected result is 11\n    assert find_min_n_greater_than_k(3) == 11, \"Test case 2 failed.\"\n    # Test case 3: k = 5, expected result is 83\n    assert find_min_n_greater_than_k(5) == 83, \"Test case 3 failed.\"\n\n    print(\"All test cases passed.\")\n\n\n# Run the test function\ntest_find_min_n_greater_than_k()",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "def find_min_n_greater_than_k(k: int) -> int:\n    \"\"\"\n    Calculate the smallest positive integer n such that the sum of the harmonic series\n    up to 1/n is greater than a given positive integer k.\n\n    The harmonic series is defined as S_n = 1 + 1/2 + 1/3 + ... + 1/n.\n\n    Args:\n    - k (int): A positive integer representing the threshold value the harmonic series sum must exceed.\n\n    Returns:\n    - int: The smallest integer n for which the harmonic series sum S_n exceeds the threshold k.\n\n    Examples:\n    >>> find_min_n_greater_than_k(1)\n    2\n    >>> find_min_n_greater_than_k(3)\n    11\n    \"\"\"\n    # Solution: Iterative approach using binary search.\n    # Since the harmonic series grows logarithmically, we can use a binary search approach to find the smallest n\n    # that satisfies the condition. We can start with an initial estimate for n and repeatedly adjust the estimate\n    # until we find the smallest n that works.\n    # Time complexity: O(log n)\n    # Space complexity: O(1)\n\n    # Initialize the lower and upper bounds for the binary search.\n    lower_bound = 1\n    upper_bound = 2**32 - 1\n\n    # Iteratively perform the binary search until we find the smallest n that works.\n    while True:\n        # Calculate the midpoint of the current interval.\n        midpoint = (lower_bound + upper_bound) // 2\n\n        # Calculate the harmonic series sum for the current midpoint.\n        harmonic_sum = sum(1.0 / i for i in range(1, midpoint + 1))\n\n        # Check if the harmonic series sum exceeds the threshold k.\n        if harmonic_sum > k:\n            # If the harmonic series sum exceeds the threshold k, adjust the upper bound for the binary search.\n            upper_bound = midpoint\n        else:\n            # If the harmonic series sum does not exceed the threshold k, adjust the lower bound for the binary search.\n            lower_bound = midpoint + 1\n\n        # Check if the current interval is 1 long.\n        if upper_bound - lower_bound == 1:\n            # If the interval is 1 long, return the smallest integer in the interval.\n            return lower_bound\ndef test_find_min_n_greater_than_k():\n    # Test case 1: k = 1, expected result is 2\n\n    assert find_min_n_greater_than_k(1) == 2, \"Test case 1 failed.\"\n\n    # Test case 2: k = 3, expected result is 11\n    assert find_min_n_greater_than_k(3) == 11, \"Test case 2 failed.\"\n    # Test case 3: k = 5, expected result is 83\n    assert find_min_n_greater_than_k(5) == 83, \"Test case 3 failed.\"\n\n    print(\"All test cases passed.\")\n\n\n# Run the test function\ntest_find_min_n_greater_than_k()",
      "timestamp": 1746753848,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    }
  ]
}