{
  "name": "Python-8",
  "language": "py",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "from typing import List, Tuple\n\ndef max_value_on_paths(N: int, grid_values: List[Tuple[int, int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum sum of values collected on two paths in an N x N grid.\n\n    This function utilizes dynamic programming to find two paths from the top-left corner to\n    the bottom-right corner of the grid which maximize the sum of the values collected. Each\n    value can be collected at most once, even if both paths pass through it.\n\n    Args:\n    - N (int): The size of the grid (N x N).\n    - grid_values (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n      the x-coordinate, y-coordinate, and value to be placed on the grid at that position.\n      The list is terminated by a tuple with all zeros.\n\n    Returns:\n    - int: The maximum sum of values collected on the two paths.\n\n    Examples:\n    >>> max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)])\n    3\n    >>> max_value_on_paths(8, [\n    ...     (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n    ...     (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n    ...     (0, 0, 0)])\n    67\n    \"\"\"",
  "tests": "def test_max_value_on_paths():\n    # Test case 1: Small grid with clear path\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n    \n    # Test case 2: Example provided in the problem statement\n    assert max_value_on_paths(8, [\n        (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n        (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n        (0, 0, 0)]) == 67\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value_on_paths()",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List, Tuple\n\ndef max_value_on_paths(N: int, grid_values: List[Tuple[int, int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum sum of values collected on two paths in an N x N grid.\n\n    This function utilizes dynamic programming to find two paths from the top-left corner to\n    the bottom-right corner of the grid which maximize the sum of the values collected. Each\n    value can be collected at most once, even if both paths pass through it.\n\n    Args:\n    - N (int): The size of the grid (N x N).\n    - grid_values (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n      the x-coordinate, y-coordinate, and value to be placed on the grid at that position.\n      The list is terminated by a tuple with all zeros.\n\n    Returns:\n    - int: The maximum sum of values collected on the two paths.\n\n    Examples:\n    >>> max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)])\n    3\n    >>> max_value_on_paths(8, [\n    ...     (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n    ...     (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n    ...     (0, 0, 0)])\n    67\n    \"\"\"\n    # Initialize the grid to have a value of -1 (unassigned) at each position.\n    grid = [[-1 for _ in range(N)] for _ in range(N)]\n\n    # Assign values to grid positions based on the input grid_values.\n    for v in grid_values:\n        x, y, value = v\n        grid[x][y] = value\n\n    # Initialize the two paths to have a value of -1 (unassigned) at each position.\n    path1 = [[-1 for _ in range(N)] for _ in range(N)]\n    path2 = [[-1 for _ in range(N)] for _ in range(N)]\n\n    # Initialize the sum of the values collected on each path to 0.\n    sum_path1 = 0\n    sum_path2 = 0\n\n    # The maximum sum of values collected on the two paths.\n    max_sum = 0\n\n    # Initialize the current position to the top-left corner.\n    x = 0\n    y = 0\n\n    # Initialize the path to have a value of -1 (unassigned).\n    path_value = -1\n\n    # While the current position is not the bottom-right corner.\n    while x < N - 1 or y < N - 1:\n        # If the current position is unassigned or has a larger value than the\n        # current maximum sum of values collected on the two paths.\n        if grid[x][y] == -1 or grid[x][y] > max_sum:\n            # Update the maximum sum of values collected on the two paths.\n            max_sum = max(max_sum, grid[x][y])\n\n            # If the path value is unassigned or has a larger value than the\n            # current maximum sum of values collected on the two paths.\n            if path_value == -1 or path_value > max_sum:\n                # Update the path value.\n                path_value = max_sum\n\n            # If the path value is the maximum sum of values collected on the two paths.\n            if path_value == max_sum:\n                # Update the sum of values collected on the current path.\n                sum_path1 += grid[x][y]\n\n                # If the current position is the bottom-right corner.\n                if x == N - 1 and y == N - 1:\n                    # Update the sum of values collected on the other path.\n                    sum_path2 += grid[x][y]\n\n                    # Return the sum of values collected on the two paths.\n                    return sum_path1 + sum_path2\n\n        # Update the position.\n        if x == N -\ndef test_max_value_on_paths():\n    # Test case 1: Small grid with clear path\n    assert max_value_on_paths(2, [(1, 2, 1), (2, 1, 2), (0, 0, 0)]) == 3\n    \n    # Test case 2: Example provided in the problem statement\n    assert max_value_on_paths(8, [\n        (2, 3, 13), (2, 6, 6), (3, 5, 7), (4, 4, 14),\n        (5, 2, 21), (5, 6, 4), (6, 3, 15), (7, 2, 14),\n        (0, 0, 0)]) == 67\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value_on_paths()",
      "timestamp": 1746806475,
      "stdout": "",
      "stderr": "  File \"/tmp/tmplbexlaf5.py\", line 83\n    if x == N -\n               ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}