{
  "name": "Python-24",
  "language": "py",
  "temperature": 0.8,
  "top_p": 0.95,
  "max_tokens": 1024,
  "prompt": "def count_partitions(n: int, k: int, x: int) -> int:\n    \"\"\"\n    Count the number of ways to partition an integer n into k parts,\n    where each part is at least x and order of parts does not matter.\n\n    Parameters:\n    n (int): The integer to be partitioned.\n    k (int): The number of parts to divide n into.\n    x (int): The minimum value for each part.\n\n    Returns:\n    int: The number of distinct partitioning ways.\n\n    Examples:\n    >>> count_partitions(7, 3, 1)\n    4\n    >>> count_partitions(6, 2, 1)\n    3\n    \"\"\"",
  "tests": "def test_count_partitions():\n    # Test case 1: Simple case\n    result = count_partitions(7, 3, 1)\n    assert result == 4, f\"Expected 4, got {result}\"\n\n    # Test case 2: Another simple case\n    result = count_partitions(6, 2, 1)\n    assert result == 3, f\"Expected 3, got {result}\"\n\n    # Test case 3: Partitioning into a larger number of parts\n    result = count_partitions(8, 4, 1)\n    assert result == 5, f\"Expected 5, got {result}\"\n\n    print(\"All test cases passed successfully!\")\n\n\n# Call the test function to run the test cases\ntest_count_partitions()",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "def count_partitions(n: int, k: int, x: int) -> int:\n    \"\"\"\n    Count the number of ways to partition an integer n into k parts,\n    where each part is at least x and order of parts does not matter.\n\n    Parameters:\n    n (int): The integer to be partitioned.\n    k (int): The number of parts to divide n into.\n    x (int): The minimum value for each part.\n\n    Returns:\n    int: The number of distinct partitioning ways.\n\n    Examples:\n    >>> count_partitions(7, 3, 1)\n    4\n    >>> count_partitions(6, 2, 1)\n    3\n    \"\"\"\n\n    # Validate input\n    assert n > 0, 'n must be greater than zero'\n    assert k > 0, 'k must be greater than zero'\n    assert x > 0, 'x must be greater than zero'\n\n    # Initialize dynamic programming table\n    table = [[0] * (n + 1) for _ in range(k + 1)]\n\n    # Populate table from right to left, top to bottom\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if j < x:\n                # No solutions when j is less than x\n                table[i][j] = 0\n            else:\n                table[i][j] = table[i][j - 1] + table[i - 1][j - x]\n\n    return table[k][n]\ndef test_count_partitions():\n    # Test case 1: Simple case\n    result = count_partitions(7, 3, 1)\n    assert result == 4, f\"Expected 4, got {result}\"\n\n    # Test case 2: Another simple case\n    result = count_partitions(6, 2, 1)\n    assert result == 3, f\"Expected 3, got {result}\"\n\n    # Test case 3: Partitioning into a larger number of parts\n    result = count_partitions(8, 4, 1)\n    assert result == 5, f\"Expected 5, got {result}\"\n\n    print(\"All test cases passed successfully!\")\n\n\n# Call the test function to run the test cases\ntest_count_partitions()",
      "timestamp": 1746740757,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9ixfc4s3.py\", line 56, in <module>\n    test_count_partitions()\n  File \"/tmp/tmp9ixfc4s3.py\", line 42, in test_count_partitions\n    assert result == 4, f\"Expected 4, got {result}\"\nAssertionError: Expected 4, got 0\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}