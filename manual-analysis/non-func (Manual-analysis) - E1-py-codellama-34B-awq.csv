taskid,code,consistency,readability
task_1,"from typing import List

def add_elements(arr: List[int], k: int) -> int:
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

    >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
    24

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""

    # Time: O(n); Space: O(1)
    # Two pointers
    # Maintain a window of size k to check the number of digits
    # and the sum of the elements with at most two digits
    n = len(arr)

    # Edge case
    if k == n:
        return sum([x for x in arr if 9 < x < 100])

    # Initialize the window
    window = [arr[0]]
    sum_of_elements = arr[0]
    for i in range(1, k):
        window.append(arr[i])
        if 9 < arr[i] < 100:
            sum_of_elements += arr[i]
    result = sum_of_elements

    # Maintain the window
    for i in range(k, n):
        for j in range(len(window)):
            if window[j] == arr[i-k+j]:
                if 9 < window[j] < 100:
                    sum_of_elements -= window[j]
                window[j] = arr[i]
                if 9 < arr[i] < 100:
                    sum_of_elements += arr[i]
                break

        result = max(result, sum_of_elements)

    return result
",acceptable,acceptable
task_2,"from typing import Union

def rounded_avg(n: int, m: int) -> Union[str, int]:
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    >>> rounded_avg(1, 5)
    '0b11'
    >>> rounded_avg(7, 5)
    -1
    >>> rounded_avg(10, 20)
    '0b1111'
    >>> rounded_avg(20, 33)
    '0b11010'
    """"""

    if n > m:
        return -1
    avg = (m + n) // 2
    return f'0b{bin(avg)[2:]}'
",good,good
task_3,"def triangle_area(a: int, b: int, c: int) -> float:
    """"""
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    >>> triangle_area(3, 4, 5)
    6.0
    >>> triangle_area(1, 2, 10)
    -1
    """"""


    if a + b > c and b + c > a and a + c > b:
        return round((a + b + c) / 2 * (a + b - c), 2)
    return -1
",good,acceptable
task_4,"from typing import List

def triples_sum_to_zero(l: List[int]) -> bool:
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""

    n = len(l)

    for i in range(n):
        for j in range(i+1, n):
            for k in range(j+1, n):
                if l[i] + l[j] + l[k] == 0:
                    return True

    return False
",acceptable,good
task_5,"from typing import List

def f(n: int) -> List[int]:
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    >>> f(5)
    [1, 2, 6, 24, 15]
    """"""


    l = []
    for i in range(1, n+1):
        if i % 2 == 0:
            l.append(1)
            for j in range(2, i+1):
                l[-1] *= j
        else:
            l.append(sum(range(1, i+1)))
    return l
",good,poor
task_6,"def special_factorial(n: int) -> int:
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""

    if n == 0:
        return 1
    return n * special_factorial(n-1)
",acceptable,good
task_7,"def correct_bracketing(brackets: str) -> bool:
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing('(')
    False
    >>> correct_bracketing('()')
    True
    >>> correct_bracketing('(()())')
    True
    >>> correct_bracketing(')(()')
    False
    """"""

    stack = []
    for char in brackets:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if stack:
                stack.pop()
            else:
                return False
    return not stack
",good,good
task_8,"def right_angle_triangle(a: int, b: int, c: int) -> bool:
    """"""
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    >>> right_angle_triangle(3, 4, 5)
    True
    >>> right_angle_triangle(1, 2, 3)
    False
    """"""

    return a**2 + b**2 == c**2
",acceptable,acceptable
task_9,"def same_chars(s0: str, s1: str) -> bool:
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""

    return set(s0) == set(s1)
",good,good
task_10,"def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""

    words = numbers.split()
    nums = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8,
            'nine': 9}
    return ' '.join(sorted(words, key=lambda x: nums[x]))
",acceptable,good
task_11,"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""

    groups = paren_string.split(' ')
    return [max(0, -min(paren_count_stack)) for paren_count_stack in (paren_counts(group) for group in groups)]
",acceptable,acceptable
task_12,"def solve(N: int) -> str:
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
    >>> solve(1000)
    '1'
    >>> solve(150)
    '110'
    >>> solve(147)
    '1100'
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""

    binary_str = """"
    while N > 0:
        binary_str += str(N % 2)
        N = N // 2
    return binary_str[::-1]
",acceptable,acceptable
task_13,"from typing import List, Tuple, Optional

def largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:
    """"""
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])
    (None, 1)
    >>> largest_smallest_integers([])
    (None, None)
    >>> largest_smallest_integers([0])
    (None, None)
    """"""

    largest_negative = None
    smallest_positive = None

    for item in lst:
        if item < 0 and (largest_negative is None or item > largest_negative):
            largest_negative = item

        if item > 0 and (smallest_positive is None or item < smallest_positive):
            smallest_positive = item

    return largest_negative, smallest_positive
",good,good
task_14,"from typing import List

def select_words(s: str, n: int) -> List[str]:
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    >>> select_words('Mary had a little lamb', 4)
    ['little']
    >>> select_words('Mary had a little lamb', 3)
    ['Mary', 'lamb']
    >>> select_words('simple white space', 2)
    []
    >>> select_words('Hello world', 4)
    ['world']
    >>> select_words('Uncle sam', 3)
    ['Uncle']
    """"""

    vowels = 'aeiou'
    words = s.split()
    words_length = []
    for word in words:
        if len(word) == n:
            words_length.append(word)
    return words_length
",acceptable,acceptable
task_15,"def largest_prime_factor(n: int) -> int:
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""

    i = 2
    while i <= n ** 0.5:
        if n % i == 0:
            return i if n // i == 1 else largest_prime_factor(n // i)
        i += 1
    raise ValueError(f""Can't find largest prime factor of {n}"")
",acceptable,acceptable
task_16,"def digitSum(s: str) -> int:
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
    >>> digitSum('')
    0
    >>> digitSum('abAB')
    131
    >>> digitSum('abcCd')
    67
    >>> digitSum('helloE')
    69
    >>> digitSum('woArBld')
    131
    >>> digitSum('aAaaaXa')
    153
    """"""

    return sum(ord(c) for c in s if c.isupper())
",acceptable,acceptable
task_17,"def is_simple_power(x: int, n: int) -> bool:
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    >>> is_simple_power(1, 4)
    True
    >>> is_simple_power(2, 2)
    True
    >>> is_simple_power(8, 2)
    True
    >>> is_simple_power(3, 2)
    False
    >>> is_simple_power(3, 1)
    False
    >>> is_simple_power(5, 3)
    False
    """"""

    return any(x == n**i for i in range(1, 100))
",acceptable,acceptable
task_18,"from typing import List

def skjkasdkd(lst: List[int]) -> int:
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
    10
    >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
    25
    >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
    13
    >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
    11
    >>> skjkasdkd([0, 81, 12, 3, 1, 21])
    3
    >>> skjkasdkd([0, 8, 1, 2, 1, 7])
    7
    """"""

    largest = 0
    for i in lst:
        if i > largest and isPrime(i):
            largest = i
    return sum(int(j) for j in str(largest))
",good,good
task_19,"from typing import List

def order_by_points(nums: List[int]) -> List[int]:
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12])
    [-1, -11, 1, -12, 11]
    >>> order_by_points([])
    []
    """"""

    if not nums:
        return []

    return sorted(nums, key=lambda x: (sum(int(c) for c in str(abs(x))), x))
",acceptable,poor
task_20,"def fib4(n: int) -> int:
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""

    if n < 4:
        return 0
    if n == 4:
        return 2
    a, b, c, d = 0, 0, 2, 0
    for _ in range(4, n + 1):
        a, b, c, d = b, c, d, a + b + c + d
    return d
",poor,poor
task_21,"from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    >>> reverse_delete('abcde', 'ae')
    ('bcd', False)
    >>> reverse_delete('abcdef', 'b')
    ('acdef', False)
    >>> reverse_delete('abcdedcba', 'ab')
    ('cdedc', True)
    """"""

    return (
        """".join(x for x in s if x not in c),
        all(x == y for x, y in zip(s, s[::-1]))
    )
",acceptable,acceptable
task_22,"def valid_date(date: str) -> bool:
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    >>> valid_date('03-11-2000')
    True

    >>> valid_date('15-01-2012')
    False

    >>> valid_date('04-0-2040')
    False

    >>> valid_date('06-04-2020')
    True

    >>> valid_date('06/04/2020')
    False
    """"""


    if not date:
        return False

    day, month, year = date.split('-')

    day = int(day)
    month = int(month)
    year = int(year)

    if not 1 <= month <= 12:
        return False

    if not 1 <= day <= 31:
        return False

    if month in (1, 3, 5, 7, 8, 10, 12) and day > 31:
        return False
    elif month in (4, 6, 9, 11) and day > 30:
        return False
    elif month == 2 and day > 29:
        return False

    return True
",good,good
task_23,"def get_max_triples(n: int) -> int:
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
    >>> get_max_triples(5)
    1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""


    mod = 3
    count = 0
    a = []
    for i in range(n):
        a.append(i * i - i + 1)
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % mod == 0:
                    count += 1
    return count
",acceptable,poor
task_24,"def triangle_area(a: int, h: int) -> float:
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""

    return (a * h) / 2
",good,good
task_25,"from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
    [0, 0, 0, 0, 3, 3]
    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
    [4, 4, 1, 0, 0, 6]
    """"""

    result = []
    for i in range(len(game)):
        if guess[i] == game[i]:
            result.append(0)
        else:
            result.append(abs(game[i] - guess[i]))
    return result
",good,good
task_26,"from typing import List

def do_algebra(operator: List[str], operand: List[int]) -> int:
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""

    result = operand[0]

    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i + 1]
        elif operator[i] == '-':
            result -= operand[i + 1]
        elif operator[i] == '*':
            result *= operand[i + 1]
        elif operator[i] == '//':
            result //= operand[i + 1]
        elif operator[i] == '**':
            result **= operand[i + 1]
        else:
            raise ValueError(""Illegal operator"")

    return result
",poor,acceptable
task_27,"from typing import Dict

def check_dict_case(dict: Dict[str, str]) -> bool:
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    >>> check_dict_case({ 'a': 'apple', 'b': 'banana' })
    True
    >>> check_dict_case({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })
    False
    >>> check_dict_case({ 'a': 'apple', 8: 'banana', 'a': 'apple' })
    False
    >>> check_dict_case({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })
    False
    >>> check_dict_case({ 'STATE': 'NC', 'ZIP': '12345' })
    True
    """"""

    if len(dict) == 0:
        return False

    if all(k.isupper() for k in dict.keys()) or all(k.islower() for k in dict.keys()):
        return True
    else:
        return False
",acceptable,acceptable
task_28,"from typing import List

def sort_array(arr: List[int]) -> List[int]:
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4])
    [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6])
    [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4])
    [0, 1, 2, 3, 4]
    """"""

    return [arr[i] for i in sorted(
        range(len(arr)), key=lambda x: (bin(arr[x]).count('1'), arr[x]))]
",acceptable,poor
task_29,"from typing import List

def sort_array(array: List[int]) -> List[int]:
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    >>> sort_array([])
    []
    >>> sort_array([5])
    [5]
    >>> sort_array([2, 4, 3, 0, 1, 5])
    [0, 1, 2, 3, 4, 5]
    >>> sort_array([2, 4, 3, 0, 1, 5, 6])
    [6, 5, 4, 3, 2, 1, 0]
    """"""

    first = array[0]
    last = array[-1]
    is_sum_odd = (first + last) % 2
    return array.sort(reverse=is_sum_odd)
",acceptable,acceptable
task_30,"from typing import List

def search(lst: List[int]) -> int:
    """"""
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
    >>> search([4, 1, 2, 2, 3, 1])
    2
    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])
    3
    >>> search([5, 5, 4, 4, 4])
    -1
    """"""

    length = len(lst)
    if length == 1:
        return -1

    max_value = -1
    for i in range(1, length):
        if lst.count(i) >= i:
            max_value = i

    return max_value
",good,acceptable
task_31,"from typing import List

def get_odd_collatz(n: int) -> List[int]:
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    >>> get_odd_collatz(5)
    [1, 5]
    """"""


    collatz = []
    if n == 1:
        return [1]

    while n > 1:
        if n % 2 == 0:
            n = n // 2
        else:
            collatz.append(n)
            n = 3 * n + 1

    collatz.sort()

    return collatz
",poor,acceptable
task_32,"from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    """"""
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    >>> total_match([], [])
    []
    >>> total_match(['hi', 'admin'], ['hI', 'Hi'])
    ['hI', 'Hi']
    >>> total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])
    ['hi', 'admin']
    >>> total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])
    ['hI', 'hi', 'hi']
    >>> total_match(['4'], ['1', '2', '3', '4', '5'])
    ['4']
    """"""

    # return lst1 if len(sum(map(len, lst1))) < len(sum(map(len, lst2))) else lst2
    return lst2 if len(sum(map(len, lst1))) > len(sum(map(len, lst2))) else lst1
",poor,poor
task_33,"from typing import List

def sum_squares(lst: List[float]) -> int:
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    >>> lst([1.0, 2.0, 3.0])
    14
    >>> lst([1.0, 4.0, 9.0])
    98
    >>> lst([1.0, 3.0, 5.0, 7.0])
    84
    >>> lst([1.4, 4.2, 0.0])
    29
    >>> lst([-2.4, 1.0, 1.0])
    6
    

    """"""

    return sum([ceil(i)**2 for i in lst])
",poor,poor
task_34,"from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

    >>> maximum([-3, -4, 5], 3)
    [-4, -3, 5]

    Example 2:

    >>> maximum([4, -4, 4], 2)
    [4, 4]

    Example 3:

    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)
    [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""

    arr.sort()
    return arr[-k:]
",poor,poor
task_35,"from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    """"""
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    >>> will_it_fly([1, 2], 5)
    False
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    >>> will_it_fly([3, 2, 3], 1)
    False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    >>> will_it_fly([3, 2, 3], 9)
    True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    >>> will_it_fly([3], 5)
    True
    # 3 is less than the maximum possible weight, and it's balanced.
    """"""

    if len(q) <= 1:
        return True

    if q[0] + q[-1] != sum(q):
        return False

    return sum(q) <= w
",acceptable,acceptable
task_36,"def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""

    if not string:
        return ''
    for i in range(len(string), 0, -1):
        if is_palindrome(string[:i]):
            return string[:i] + string[:i][::-1]
",good,good
task_37,"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {  }, []])
    [1, 2, 3]
    """"""

    result = []
    for value in values:
        if isinstance(value, int):
            result.append(value)
    return result
",good,good
task_38,"from typing import List

def median(l: List[int]) -> float:
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""

    if len(l) % 2 == 0:
        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2
    else:
        return l[len(l) // 2]
",acceptable,poor
task_39,"def fruit_distribution(s: str, n: int) -> int:
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    >>> fruit_distribution('5 apples and 6 oranges', 19)
    8
    >>> fruit_distribution('0 apples and 1 oranges', 3)
    2
    >>> fruit_distribution('2 apples and 3 oranges', 100)
    95
    >>> fruit_distribution('100 apples and 1 oranges', 120)
    19
    """"""

    splitted_fruits = s.split(' ')
    number_of_apples = int(splitted_fruits[0])
    number_of_oranges = int(splitted_fruits[3])
    return n - number_of_apples - number_of_oranges
",acceptable,acceptable
task_40,"def vowels_count(s: str) -> int:
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count('abcde')
    2
    >>> vowels_count('ACEDY')
    3
    """"""


    vowels = ['a', 'e', 'i', 'o', 'u']

    count = 0
    for i, c in enumerate(s):
        if c in vowels and (c != 'y' or i + 1 == len(s)):
            count += 1

    return count
",acceptable,acceptable
task_41,"def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""

    return len(set([c.lower() for c in string]))
",acceptable,acceptable
task_42,"from typing import List

def generate_integers(a: int, b: int) -> List[int]:
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    >>> generate_integers(2, 8)
    [2, 4, 6, 8]
    >>> generate_integers(8, 2)
    [2, 4, 6, 8]
    >>> generate_integers(10, 14)
    []
    """"""

    if a > b:
        a, b = b, a
    return [num for num in range(a, b + 1) if not num % 2]
",acceptable,poor
task_43,"def encode(message: str) -> str:
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""

    vowels = 'aeiou'
    encoded = ''
    for char in message:
        if char in vowels:
            encoded += chr(ord(char) + 2)
        else:
            if char.isupper():
                encoded += char.lower()
            else:
                encoded += char.upper()
    return encoded
",acceptable,good
task_44,"def is_multiply_prime(a: int) -> bool:
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    >>> is_multiply_prime(30)
    True
    30 = 2 * 3 * 5
    """"""

    pass
",poor,poor
task_45,"def decimal_to_binary(decimal: int) -> str:
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    >>> decimal_to_binary(15)
    'db1111db'
    >>> decimal_to_binary(32)
    'db100000db'
    """"""

    result = ''
    if decimal == 0:
        return 'db0db'
    while decimal > 0:
        result += str(decimal % 2)
        decimal //= 2
    return 'db' + result[::-1] + 'db'
",acceptable,acceptable
task_46,"def check_if_last_char_is_a_letter(txt: str) -> bool:
    """"""
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    >>> check_if_last_char_is_a_letter('apple pie')
    False
    >>> check_if_last_char_is_a_letter('apple pi e')
    True
    >>> check_if_last_char_is_a_letter('apple pi e ')
    False
    >>> check_if_last_char_is_a_letter('')
    False
    """"""

    return txt and not txt[-1].isalpha() and txt[-2].isalpha()
",acceptable,acceptable
task_47,"def x_or_y(n: int, x: int, y: int) -> int:
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    >>> x_or_y(7, 34, 12)
    34
    >>> x_or_y(15, 8, 5)
    5
    
    """"""

    if n > 1:
        for i in range(2, n):
            if n % i == 0:
                return y
        return x
    else:
        return y
",acceptable,acceptable
task_48,"def solve(s: str) -> str:
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    >>> solve('1234')
    '4321'
    >>> solve('ab')
    'AB'
    >>> solve('#a@C')
    '#A@c'
    """"""

    if not s:
        return s

    if all(not c.isalpha() for c in s):
        return s[::-1]

    return ''.join(
        c.swapcase() if c.isalpha() else c
        for c in s
    )
",acceptable,acceptable
task_49,"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""

    groups = []
    i = 0
    while i < len(paren_string):
        open_parens = 0
        close_parens = 0
        start_i = i
        while True:
            if paren_string[i] == '(':
                open_parens += 1
            elif paren_string[i] == ')':
                close_parens += 1

            if open_parens == close_parens:
                break

            i += 1

            if i == len(paren_string):
                break

        groups.append(paren_string[start_i:i+1])
        i += 1

    return groups
",acceptable,poor
task_50,"def choose_num(x: int, y: int) -> int:
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    >>> choose_num(12, 15)
    14
    >>> choose_num(13, 12)
    -1
    """"""

    if x > y:
        x, y = y, x
    if x % 2 != 0:
        x += 1
    for i in range(x, y+1):
        if i % 2 == 0:
            return i
    return -1
",poor,acceptable